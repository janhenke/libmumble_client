# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc:10

build:
  stage: build
  cache:
    key: apt-cache
    paths:
      - apt-cache/
  before_script:
      - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
      - apt-get update -yq && apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -y cmake ninja-build libmsgsl-dev libboost-dev libboost-test-dev libprotobuf-dev protobuf-compiler libsoundio-dev libopus-dev
  script:
    - mkdir build && cd build
    - cmake -G Ninja ..
    - ninja all
    - cd ..
  artifacts:
    paths:
      - build/**.so
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

# run tests using the binary built before
test:
  stage: test
  script:
    - cd build
    - ctest
    - cd ..
